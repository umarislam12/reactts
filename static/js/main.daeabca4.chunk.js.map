{"version":3,"sources":["reportWebVitals.ts","hello.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Hello","props","onIncrement","updateEnthusiasm","state","currentEnthusiasm","onDecrement","enthusiasmLevel","console","log","this","numChars","name","Error","className","Array","join","onClick","setState","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mCCsCCQ,E,kDAjCb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAKRC,YAAc,kBAAM,EAAKC,iBAAiB,EAAKC,MAAMC,kBAAoB,IAN/C,EAO1BC,YAAc,kBAAM,EAAKH,iBAAiB,EAAKC,MAAMC,kBAAoB,IAJvE,EAAKD,MAAQ,CAAEC,kBAAmBJ,EAAMM,iBAAmB,GAHnC,E,0CAS1B,WACEC,QAAQC,WAAWC,KAAKN,OADjB,IA0BkBO,EAxBjBC,EAASF,KAAKT,MAAdW,KAER,GAAIF,KAAKN,MAAMC,mBAAqB,EAClC,MAAM,IAAIQ,MAAM,+CAGlB,OACE,sBAAKC,UAAU,QAAf,UACE,sBAAKA,UAAU,WAAf,mBACSF,GAeYD,EAfeD,KAAKN,MAAMC,kBAgB9CU,MAAMJ,EAAW,GAAGK,KAAK,SAd1B,wBAAQC,QAASP,KAAKJ,YAAtB,eACA,wBAAQW,QAASP,KAAKR,YAAtB,oB,8BAKN,SAAiBG,GACfK,KAAKQ,SAAS,CAAEb,0B,GA9BAc,aCNpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAQV,KAAK,WAEfW,SAASC,eAAe,SAM1BjC,M","file":"static/js/main.daeabca4.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// src/components/StatefulHello.tsx\nimport \"./hello\";\nimport * as React from \"react\";\n\nexport interface Props {\n  name:string;\n  enthusiasmLevel?: number;\n}\n\ninterface State {\n  currentEnthusiasm: number;\n}\n\nclass Hello extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    \n    this.state = { currentEnthusiasm: props.enthusiasmLevel || 1 };\n  }\n  \n  onIncrement = () => this.updateEnthusiasm(this.state.currentEnthusiasm + 1);\n  onDecrement = () => this.updateEnthusiasm(this.state.currentEnthusiasm - 1);\n  \n  render() {\n    console.log(typeof this.state)\n    const { name } = this.props;\n    \n    if (this.state.currentEnthusiasm <= 0) {\n      throw new Error('You could be a little more enthusiastic. :D');\n    }\n\n    return (\n      <div className=\"hello\">\n        <div className=\"greeting\">\n          Hello {name + getExclamationMarks(this.state.currentEnthusiasm)}\n        </div>\n        <button onClick={this.onDecrement}>-</button>\n        <button onClick={this.onIncrement}>+</button>\n      </div>\n    );\n  }\n\n  updateEnthusiasm(currentEnthusiasm: number) {\n    this.setState({ currentEnthusiasm });\n  }\n}\n\nexport default Hello;\n\nfunction getExclamationMarks(numChars: number) {\n  return Array(numChars + 1).join('!');\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Hello from './hello';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Hello  name=\"umar\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}